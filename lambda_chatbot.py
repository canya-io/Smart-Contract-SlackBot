"""
Slack chat-bot Lambda handler.
"""

import os
import logging
import urllib
import re

# Grab the Bot OAuth token from the environment.
BOT_TOKEN = os.environ["BOT_TOKEN"]
EVENT_TOKEN = os.environ["EVENT_TOKEN"]

# Define the URL of the targeted Slack API resource.
# We'll send our replies there.
SLACK_URL = "https://slack.com/api/chat.postMessage"

def lambda_handler(data, context):
    
    if "challenge" in data:
        return data["challenge"]
        
    """Handle an incoming HTTP request from a Slack chat-bot.
    """
    # Grab the Slack event data.
    slack_event = data['event']
    
    # We need to discriminate between events generated by 
    # the users, which we want to process and handle, 
    # and those generated by the bot.
    text = slack_event["text"]
    if "bot_id" in slack_event:
        logging.warn("Ignore bot event")
    if re.match('.*?0x[A-Za-z0-9]{64}.*',text) is not None:
        
        warning_text = "DANGER: This user has posted a fake contract address. This is probably a SCAM. See https://canya.io for the official address"
        
        # Get the ID of the channel where the message was posted.
        channel_id = slack_event["channel"]
        
        # We need to send back three pieces of information:
        #     1. The reversed text (text)
        #     2. The channel id of the private, direct chat (channel)
        #     3. The OAuth token required to communicate with 
        #        the API (token)
        # Then, create an associative array and URL-encode it, 
        # since the Slack API doesn't not handle JSON (bummer).
        data = urllib.parse.urlencode(
            (
                ("token", EVENT_TOKEN),
                ("channel", channel_id),
                ("text", warning_text),
                ("as_user", False)
            )
        )
        data = data.encode("ascii")
        
        # Construct the HTTP request that will be sent to the Slack API.
        request = urllib.request.Request(
            SLACK_URL, 
            data=data, 
            method="POST"
        )
        # Add a header mentioning that the text is URL-encoded.
        request.add_header(
            "Content-Type", 
            "application/x-www-form-urlencoded"
        )
        
        # Fire off the request!
        response = urllib.request.urlopen(request).read()
        logging.warn(response)
    # Everything went fine.
    return "200 OK"